{%- import 'addressable.sv' as addressable with context -%}

// This file was autogenerated by PeakRDL-verilog
module {{get_inst_name(top_node)}} (
    // Clocks and resets
    clk,
    resetn,

    // Register Bus
    valid,    // active high
    read,     // indicates request is a read
    addr      // address (byte aligned, absolute address)
    wdata,    // write data
    wmask,    // write mask
    rdata,    // read data

{%- for node in top_node.descendants() -%}
{%- if isinstance(node, RegNode) %}

    // Register {{get_inst_name(node)}}
    {{signal(node)}}_strb,

{%- elif isinstance(node, FieldNode) -%}
{%- if node.is_hw_writable %}
    {{signal(node)}}_wr,
    {{signal(node)}}_wdata,

{%- endif -%}
{%- if node.is_hw_readable %}
    {{signal(node)}}_q,

{%- endif -%}
{%- if node.get_property('counter') %}
    {{signal(node)}}_incr,

{%- endif -%}
{%- endif -%}
{%- endfor %}
)
    parameter ADDR_OFFSET = 'h0; // Module's offset in the main address map
    parameter ADDR_WIDTH  = 32;
    parameter DATA_WIDTH  = 32;

    // ============================================================
    // SW Access logic
    // ============================================================
    input wire                    valid;
    input wire                    isread;
    input wire [ADDR_WIDTH-1:0]   addr;
    input wire [DATA_WIDTH-1:0]   wdata;
    input wire [DATA_WIDTH/8-1:0] wmask;
    output wire [DATA_WIDTH-1:0]  rdata;

    reg [DATA_WIDTH-1:0] mask;

    always @ (wmask) begin
        int byte_idx;
        for (byte_idx = 0; byte_idx < DATA_WIDTH/8; byte_idx+=1)
          mask[8*(byte_idx+1)-1 -: 8] = {8{wmask[byte_idx]}};
    end

{%- for node in top_node.descendants() -%}
{%- if isinstance(node, RegNode) %}
    wire [DATA_WIDTH-1:0] {{signal(node)}}_rdata;
{%- endif -%}
{%- endfor %}

    assign rdata = // or of each register return (masked)
{%- for node in top_node.descendants() -%}
    {%- if isinstance(node, RegNode) %}
                   {{signal(node)}}_rdata |
    {%- endif -%}
{%- endfor %}
                   {DATA_WIDTH{1'b0}};

    {{ addressable.body(top_node)|indent}}

endmodule: {{get_inst_name(top_node)}}

